{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DGamboa Notes & Snippets","text":"<p> DGamboa Notes &amp; Snippets </p> <p> Welcome to the \"DGamboa Notes &amp; Snippets\" repository! </p> <p>Here, I document my journey through the fascinating world of software development, Python programming, Docker containers, Linux administration, 3D printing, IoT home automation, and various other intriguing technologies.</p> <p>As I explore these fields, I collect valuable insights, code snippets, and notes to aid my learning process and share with the community. Whether you're a seasoned developer or just starting your journey, I hope you find something useful here.</p> <p>Get Involved:</p> <p>Feel free to explore the contents of this repository, fork it, and contribute back! Your feedback, suggestions, and contributions are highly valued and appreciated.</p> <p>You can find the full documentation as a static website at DGamboa Notes &amp; Snippets.</p> <p>Happy coding!</p> <p>Diego Gamboa</p> <ul> <li> Notes </li> <li> Articles </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/","title":"Using <code>git sparse-checkout</code> for faster documentation builds","text":"<p>Leveraging <code>git sparse-checkout</code> in GitHub Actions enabled us to speed up documentation builds in our repository, cutting checkout times from 20 to 30 seconds to just 2 seconds.</p>"},{"location":"topics/","title":"Topics","text":"<p>This page lists the topics that I have written about. Click on a topic to view the notes.</p> <ul> <li> <p> Python</p> <p>Python is a popular programming language. Here are some notes about Python.</p> <p> Notes</p> </li> <li> <p> Docker</p> <p>Docker is a platform for developing, shipping, and running applications. Here are some notes about Docker.</p> <p> Notes</p> </li> <li> <p> Linux</p> <p>Linux bash scripting and command line are powerful tools for automation and system management.</p> <p> Notes</p> </li> <li> <p> Self-Hosting</p> <p>Self-hosting is a way to take control of your data and services by hosting them yourself. Besides, it is a great way to learn about servers and networking. Here are some notes about self-hosting.</p> <p> Notes</p> </li> <li> <p> Home Automation</p> <p>In this section, You will find notes about journey into home automation using Home Assistant and ESPHome.</p> <p> Notes</p> </li> <li> <p> 3D Printing</p> <p>3D printing is an exciting technology that allows you to bring your ideas to life. Here are some notes about 3D printing.</p> <p> Notes</p> </li> </ul>"},{"location":"topics/placeholder/","title":"Default Page","text":"<p>This is a placeholder page. It will be replaced with the actual content soon.</p> <p>Stay tuned! \ud83d\ude80</p>"},{"location":"topics/3d-printing/","title":"3D Printing Notes","text":"<p>Explore the exciting world of 3D printing. Discover the basics of 3D printing technology, delve into printer recommendations, and find resources to bring your 3D design ideas to life.</p>"},{"location":"topics/3d-printing/#useful-python-resources","title":"Useful Python Resources","text":""},{"location":"topics/3d-printing/#books","title":"Books \ud83d\udcda","text":""},{"location":"topics/3d-printing/#online-resources","title":"Online Resources \ud83c\udf10","text":""},{"location":"topics/3d-printing/#podcasts","title":"Podcasts \ud83c\udf99\ufe0f","text":""},{"location":"topics/docker/","title":"Docker Notes","text":"<p>Welcome to the world of containerization! Here, we'll dive into Docker, a platform that lets you package your applications with all their dependencies into standardized units called containers. Docker makes deploying and running applications across different environments a breeze. Get ready to learn how to containerize your apps, manage them efficiently, and unlock the power of containerized workflows.</p>"},{"location":"topics/docker/#useful-python-resources","title":"Useful Python Resources","text":""},{"location":"topics/docker/#books","title":"Books","text":""},{"location":"topics/docker/#online-resources","title":"Online Resources","text":""},{"location":"topics/docker/#podcasts","title":"Podcasts","text":""},{"location":"topics/git/remove_leaked_env/","title":"Permanently Remove a Leaked .env File from GitHub","text":""},{"location":"topics/git/remove_leaked_env/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Permanently Remove a Leaked .env File from GitHub</li> <li>Table of Contents</li> <li>Revoke any leaked credentials</li> <li>Remove the file and commit the changes</li> <li>Remove the .env file from history with filter-branch</li> <li>Force push the changes to github</li> <li>Clean up the local repository</li> <li>References</li> </ul>"},{"location":"topics/git/remove_leaked_env/#revoke-any-leaked-credentials","title":"Revoke any leaked credentials","text":"<p>if you have accidentally leaked any credentials, revoke them immediately. This will prevent unauthorized access to your accounts.</p>"},{"location":"topics/git/remove_leaked_env/#remove-the-file-and-commit-the-changes","title":"Remove the file and commit the changes","text":"<p>Remove the leaked file from your local repository and commit the changes.</p> <pre><code>git rm --cached .env\necho \".env\" &gt;&gt; .gitignore\ngit add .gitignore\ngit commit -m \"Remove leaked .env file\"\n</code></pre>"},{"location":"topics/git/remove_leaked_env/#remove-the-env-file-from-history-with-filter-branch","title":"Remove the .env file from history with filter-branch","text":"<p><pre><code>git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch .env' --prune-empty --tag-name-filter cat -- --all\n</code></pre> <code>filter-branch</code> will rewrite the history of your repository to remove the <code>.env</code> file from all commits.</p> <ul> <li><code>--force</code>: This option forces the rewrite even if the branch is already filtered.</li> <li><code>--index-filter 'git rm --cached --ignore-unmatch .env'</code>: This option specifies a command to run on each commit. Here, it removes the .env file from the index (staging area) if it exists.</li> <li><code>--prune-empty</code>: This option removes any commits that become empty (i.e., have no changes) after the filter is applied.</li> <li><code>--tag-name-filter cat</code>: This option ensures that tags are rewritten to point to the corresponding rewritten commits. <code>-- --all</code>: This option specifies that the filter should be applied to all branches and tags.</li> </ul>"},{"location":"topics/git/remove_leaked_env/#force-push-the-changes-to-github","title":"Force push the changes to github","text":"<pre><code>git push origin --force --all\ngit push --force --tags\n</code></pre>"},{"location":"topics/git/remove_leaked_env/#clean-up-the-local-repository","title":"Clean up the local repository","text":"<pre><code>rm -rf .git/refs/original/\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\n</code></pre>"},{"location":"topics/git/remove_leaked_env/#references","title":"References","text":"<ul> <li>How to remove a leaked .env file from GitHub permanently</li> <li>Exposing secrets on GitHub: What to do after leaking credentials and API keys</li> </ul>"},{"location":"topics/home-automation/","title":"Home Automation","text":"<p>Get inspired to create a smart home! Find resources on building your own automation projects, hardware recommendations, and DIY tips to bring your home to life.</p>"},{"location":"topics/home-automation/#useful-python-resources","title":"Useful Python Resources","text":""},{"location":"topics/home-automation/#online-resources","title":"Online Resources \ud83c\udf10","text":"<ul> <li> Home Assistant</li> </ul>"},{"location":"topics/home-automation/#podcasts","title":"Podcasts \ud83c\udf99\ufe0f","text":""},{"location":"topics/linux/","title":"Linux bash scripting and command line notes","text":"<p>Unleash the power of your Linux terminal! This section equips you with the magic of Bash scripting and command-line tools. Learn how to automate tasks, navigate your system efficiently, and become a true Linux guru.</p>"},{"location":"topics/linux/#useful-python-resources","title":"Useful Python Resources","text":""},{"location":"topics/linux/#books","title":"Books \ud83d\udcda","text":""},{"location":"topics/linux/#online-resources","title":"Online Resources \ud83c\udf10","text":""},{"location":"topics/linux/#podcasts","title":"Podcasts \ud83c\udf99\ufe0f","text":""},{"location":"topics/python/","title":"Python","text":"<p>Python is a powerful and versatile programming language that's both beginner-friendly and perfect for complex projects. This blog is your one-stop shop for all things Python! Whether you're a seasoned coder or just starting out, you'll find a treasure trove of tutorials, tips, and tricks to level up your Python skills. Explore the vast capabilities of Python for web development, data science, automation, and more!</p>"},{"location":"topics/python/#useful-python-resources","title":"Useful Python Resources","text":""},{"location":"topics/python/#books","title":"Books \ud83d\udcda","text":"<ul> <li>\u2728 Fluent Python</li> </ul>"},{"location":"topics/python/#online-resources","title":"Online Resources \ud83c\udf10","text":"<ul> <li> MathByte Academy</li> <li> Corey Schafer</li> <li> Real Python</li> </ul>"},{"location":"topics/python/#podcasts","title":"Podcasts \ud83c\udf99\ufe0f","text":"<ul> <li>:simple-podcast: Talk Python To Me</li> <li>:simple-podcast: Python Bytes</li> </ul>"},{"location":"topics/python/string/","title":"Python String","text":""},{"location":"topics/python/string/#raw-strings","title":"Raw Strings","text":"<p>Raw strings are string literals prefixed with an <code>\u2060r</code>, where the backslash () is always treated as a literal character. Always use raw strings for regular expression patterns.</p> <p><pre><code>import re\npattern = re.compile(r\"\\d{3}-\\d{3}-\\d{4}\")\n</code></pre> <pre><code>print(r\"Hello\\tWorld\")\n# Hello\\tWorld\n\nprint(\"Hello\\tWorld\") # \\t is treated as a tab\n# Hello   World\n</code></pre></p>"},{"location":"topics/python/string/#formatted-strings-f-strings","title":"Formatted Strings (f-strings)","text":"<p>Formatted strings are string literals prefixed with an <code>\u2060f</code>, where expressions inside curly braces are evaluated at runtime.</p> <pre><code>name = \"Diego\"\nprint(f\"Hi, {name}\", this is a formatted string)\n# Hello, Diego\n</code></pre> <p>In Python 3.8 and later, you can show both an expression and its result by adding an equal sign (\u2060=) at the end, like this:</p> <pre><code>x = 31\nprint(f\"{x=}\")\n# x=31\nprint(f\"{x+2=}\")\n# x+2=33\nprint(f\"{x + 2 = }\") # Spaces are allowed before and after the equal sign\n# x + 2 = 33\n</code></pre>"},{"location":"topics/python/string/#format-specifications","title":"Format Specifications","text":"<p>You can also specify the format of the expression inside the curly braces.</p> Format Description Example Result <code>!r</code> Calls <code>repr()</code> on the expression <code>f\"{x!r}\"</code> <code>'31'</code> <code>!a</code> Calls <code>ascii()</code> on the expression <code>f\"{x!a}\"</code> <code>'31'</code> <code>!s</code> Calls <code>str()</code> that is the default <code>f\"{x!s}\"</code> <code>'31'</code> <code>:=+</code> Includes the sign of the number <code>f\"{-31:=+}\"</code> <code>'-31'</code> <code>:&lt;6</code> Left aligns the value in a field of width 6 <code>f\"{x:&lt;6}\"</code> <code>'31    '</code> <code>:&gt;6</code> Right aligns the value in a field of width 6 <code>f\"{x:&gt;6}\"</code> <code>'    31'</code> <code>:^6</code> Center aligns the value in a field of width 6 <code>f\"{x:^6}\"</code> <code>'  31  '</code> <code>:*^6</code> Center aligns the value in a field of width 6 and pads with asterisks <code>f\"{x:*^6}\"</code> <code>'*31**'</code> <code>:06</code> Pads the number with zeros <code>f\"{x:06}\"</code> <code>'000031'</code> <code>:.3f</code> Formats the number as a float with 3 decimal places <code>f\"{x:.3f}\"</code> <code>'31.000'</code> <code>:06.4f</code> Formats the number as a float with 4 decimal places and pads with zeros <code>f\"{3.14159:06.4f}\"</code> <code>'003.1416'</code> <code>:06.4e</code> Formats the number in scientific notation with 4 decimal places and pads with zeros <code>f\"{3.14159:06.4e}\"</code> <code>'3.1416e+00'</code> <code>:%</code> Formats the number as a percentage <code>f\"{0.50:%}\"</code> <code>50.000000%</code> <code>.2%</code> Formats the number as a percentage with 2 decimal places <code>f\"{0.50:.2%}\"</code> <code>50.00%</code> <code>:_</code> Adds an underscore as a thousands separator <code>f\"{1000000:_}\"</code> <code>1_000_000</code> <code>:,</code> Adds a comma as a thousands separator <code>f\"{1000000:,}\"</code> <code>1,000,000</code> <code>:,.2f</code> Adds a comma as a thousands separator and formats the number as a float with 2 decimal places <code>f\"{1000000:,.2f}\"</code> <code>1,000,000.00</code> <code>:#x</code> Formats the number in hexadecimal with a leading <code>0x</code> <code>f\"{255:#x}\"</code> <code>0xff</code> <code>:#X</code> Formats the number in hexadecimal with a leading <code>0x</code> <code>f\"{255:#X}\"</code> <code>0xFF</code> <code>:#o</code> Formats the number in octal with a leading <code>0o</code> <code>f\"{255:#o}\"</code> <code>0o377</code> <code>:#b</code> Formats the number in binary with a leading <code>0b</code> <code>f\"{255:#b}\"</code> <code>0b11111111</code> <pre><code>text = \"text\"\nprint(f\"{text:*^10}\")\n# ***text***\n\nn = 20\nprint(f\"{text:*^{n}}\")\n# ********text********\n\nn=50\nprint(f\"{text:*&gt;{n}}\")\n# **********************************************text\n</code></pre>"},{"location":"topics/python/string/#f-strings-for-datetime-formatting","title":"f-strings for datetime formatting","text":"<p>f-strings can also be used to format dates and times.</p> <pre><code>from datetime import datetime\nnow = datetime.now()\nprint(f\"{now:%Y-%m-%d %H:%M:%S}\")\n# 2024-12-01 14:41:58\n</code></pre> Format Description Example Result <code>:%x</code> Locale's appropriate date representation <code>{now:%x}</code> <code>12/01/24</code> <code>:%X</code> Locale's appropriate time representation <code>{now:%X}</code> <code>14:41:58</code> <code>:%c</code> Locale's appropriate date and time representation <code>{now:%c}</code> <code>Sun Dec  1 14:41:58 2024</code> <code>:%H:%M:%S</code> Hour, minute, and second <code>{now:%H:%M:%S}</code> <code>14:41:58</code> <code>:%Y</code> Year with century as a decimal number <code>{now:%Y}</code> <code>2024</code> <code>:%y</code> Year without century as a zero-padded decimal number <code>{now:%y}</code> <code>24</code> <code>:%m</code> Month as a zero-padded decimal number <code>{now:%m}</code> <code>12</code> <code>:%B</code> Full month name <code>{now:%B}</code> <code>December</code>"},{"location":"topics/python/string/#references","title":"References","text":"<ul> <li>Dead Simple Python: Idiomatic Python for the Impatient Programmer</li> <li>Fluent Python: Clear, Concise, and Effective Programming</li> <li>Every F-String Trick In Python Explained</li> </ul>"},{"location":"topics/python/libraries/arrow/","title":"Arrow","text":"<p>Arrow is a Python library that offers a sensible, human-friendly approach to creating, manipulating, formatting, and converting dates and times.</p>","tags":["python","python-library"]},{"location":"topics/python/libraries/arrow/#features","title":"Features","text":"<p>-</p>","tags":["python","python-library"]},{"location":"topics/python/libraries/arrow/#installation","title":"Installation","text":"<p>To install this library, you can use pip:</p> installation command<pre><code>pip install arrow\n</code></pre>","tags":["python","python-library"]},{"location":"topics/python/libraries/arrow/#usage","title":"Usage","text":"<pre><code>import arrow\n\nutc = arrow.utcnow()\n</code></pre>","tags":["python","python-library"]},{"location":"topics/python/libraries/arrow/#snippets","title":"Snippets","text":"","tags":["python","python-library"]},{"location":"topics/python/libraries/arrow/#sources","title":"Sources","text":"<ul> <li> Documentation</li> <li> PyPI</li> <li> ...</li> </ul>","tags":["python","python-library"]},{"location":"topics/python/libraries/base/","title":"Title","text":"","tags":["python","python-library"]},{"location":"topics/python/libraries/pydantic/","title":"Pydantic","text":"","tags":["python","python-library"]},{"location":"topics/self-hosting/","title":"Self-Hosting Notes","text":"<p>Take control of your data and services by hosting them yourself. This section provides resources and notes on self-hosting, including setting up your own server, managing services, and securing your data.</p>"},{"location":"topics/self-hosting/#useful-python-resources","title":"Useful Python Resources","text":""},{"location":"topics/self-hosting/#books","title":"Books \ud83d\udcda","text":""},{"location":"topics/self-hosting/#online-resources","title":"Online Resources \ud83c\udf10","text":""},{"location":"topics/self-hosting/#podcasts","title":"Podcasts \ud83c\udf99\ufe0f","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/build/","title":"Build","text":""},{"location":"blog/category/performance/","title":"Performance","text":""},{"location":"tags/","title":"Tags","text":"<p>Here is a list of all the tags that are available in this collection of notes.</p>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Arrow</li> <li>Title</li> <li>Collections</li> </ul>"},{"location":"tags/#python-library","title":"python-library","text":"<ul> <li>Arrow</li> <li>Title</li> <li>Collections</li> </ul>"}]}